"""added task table

Revision ID: 69da651ffc1a
Revises: b17ec9217081
Create Date: 2023-11-02 10:39:02.347689

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "69da651ffc1a"
down_revision = "b17ec9217081"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "RED",
        "GREEN",
        "BLUE",
        "YELLOW",
        "ORANGE",
        "PURPLE",
        "PINK",
        "BROWN",
        "BLACK",
        "WHITE",
        "GREY",
        "CYAN",
        "MAGENTA",
        "LIME",
        "TEAL",
        "LAVENDER",
        "TAN",
        "CYCLAMEN",
        "AQUAMARINE",
        "SALMON",
        "GOLD",
        "OLIVE",
        "MAROON",
        "NAVY",
        "MINT",
        "APRICOT",
        "COBALT",
        "PEACH",
        "INDIGO",
        "CRIMSON",
        "ORCHID",
        "PLUM",
        "LILAC",
        "LEMON",
        "TURQUOISE",
        "RASPBERRY",
        "VIOLET",
        "SAND",
        "BEIGE",
        "MINT_GREEN",
        "PEANUT",
        "PEAR",
        "CHERRY",
        "BANANA",
        "COFFEE",
        "CHOCOLATE",
        "CREAM",
        "CARROT",
        "TOMATO",
        "CINNAMON",
        "PINEAPPLE",
        "COCONUT",
        "PISTACHIO",
        "MANGO",
        "PAPAYA",
        name="taskcolor",
    ).create(op.get_bind())
    sa.Enum("LOW", "MEDIUM", "HIGH", name="taskpriority").create(op.get_bind())
    sa.Enum("TODO", "IN_PROGRESS", "DONE", name="taskstate").create(op.get_bind())
    op.create_table(
        "task",
        sa.Column("task_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=1000), nullable=True),
        sa.Column(
            "state",
            postgresql.ENUM(
                "TODO", "IN_PROGRESS", "DONE", name="taskstate", create_type=False
            ),
            nullable=False,
        ),
        sa.Column(
            "priority",
            postgresql.ENUM(
                "LOW", "MEDIUM", "HIGH", name="taskpriority", create_type=False
            ),
            nullable=False,
        ),
        sa.Column(
            "color",
            postgresql.ENUM(
                "RED",
                "GREEN",
                "BLUE",
                "YELLOW",
                "ORANGE",
                "PURPLE",
                "PINK",
                "BROWN",
                "BLACK",
                "WHITE",
                "GREY",
                "CYAN",
                "MAGENTA",
                "LIME",
                "TEAL",
                "LAVENDER",
                "TAN",
                "CYCLAMEN",
                "AQUAMARINE",
                "SALMON",
                "GOLD",
                "OLIVE",
                "MAROON",
                "NAVY",
                "MINT",
                "APRICOT",
                "COBALT",
                "PEACH",
                "INDIGO",
                "CRIMSON",
                "ORCHID",
                "PLUM",
                "LILAC",
                "LEMON",
                "TURQUOISE",
                "RASPBERRY",
                "VIOLET",
                "SAND",
                "BEIGE",
                "MINT_GREEN",
                "PEANUT",
                "PEAR",
                "CHERRY",
                "BANANA",
                "COFFEE",
                "CHOCOLATE",
                "CREAM",
                "CARROT",
                "TOMATO",
                "CINNAMON",
                "PINEAPPLE",
                "COCONUT",
                "PISTACHIO",
                "MANGO",
                "PAPAYA",
                name="taskcolor",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("task_deadline", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("task_id"),
    )
    op.create_index(op.f("ix_task_task_id"), "task", ["task_id"], unique=True)
    op.drop_constraint(
        "event_occurrence_event_id_fkey", "event_occurrence", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "event_occurrence", "calendar_event", ["event_id"], ["event_id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "event_occurrence", type_="foreignkey")
    op.create_foreign_key(
        "event_occurrence_event_id_fkey",
        "event_occurrence",
        "calendar_event",
        ["event_id"],
        ["event_id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_task_task_id"), table_name="task")
    op.drop_table("task")
    sa.Enum("TODO", "IN_PROGRESS", "DONE", name="taskstate").drop(op.get_bind())
    sa.Enum("LOW", "MEDIUM", "HIGH", name="taskpriority").drop(op.get_bind())
    sa.Enum(
        "RED",
        "GREEN",
        "BLUE",
        "YELLOW",
        "ORANGE",
        "PURPLE",
        "PINK",
        "BROWN",
        "BLACK",
        "WHITE",
        "GREY",
        "CYAN",
        "MAGENTA",
        "LIME",
        "TEAL",
        "LAVENDER",
        "TAN",
        "CYCLAMEN",
        "AQUAMARINE",
        "SALMON",
        "GOLD",
        "OLIVE",
        "MAROON",
        "NAVY",
        "MINT",
        "APRICOT",
        "COBALT",
        "PEACH",
        "INDIGO",
        "CRIMSON",
        "ORCHID",
        "PLUM",
        "LILAC",
        "LEMON",
        "TURQUOISE",
        "RASPBERRY",
        "VIOLET",
        "SAND",
        "BEIGE",
        "MINT_GREEN",
        "PEANUT",
        "PEAR",
        "CHERRY",
        "BANANA",
        "COFFEE",
        "CHOCOLATE",
        "CREAM",
        "CARROT",
        "TOMATO",
        "CINNAMON",
        "PINEAPPLE",
        "COCONUT",
        "PISTACHIO",
        "MANGO",
        "PAPAYA",
        name="taskcolor",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
